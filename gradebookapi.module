<?php
// $Id: gradebookapi.module,v 1.11.4.2.2.13 2009/04/11 05:08:42 mgn Exp $
/**
 * @file
 * An API for a simple gradebook.
 */

/**
 *  Implementation of hook_views_api().
 *    integrate gradebook with views 2
 */
function gradebookapi_views_api() {
  return array('api' => 2.0);
}

/**
 * Implementation of hook_perm().
 */
function gradebookapi_permission() {
  return array(
    'admin gradebookapi' => array(
      'title' => 'Administer gradebook API',
      'description' => 'TODO',
    ),
    'grade all students' => array(
      'title' => 'Grade all students',
      'description' => 'TODO',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function gradebookapi_menu() {
  $items = array();
  $items['admin/config/gradebook'] = array(
    'title' => 'Gradebook',
    'description' => 'Administer the suite of Gradebook modules.',
    'position' => 'left',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/gradebook/gradebookapi'] = array(
    'title' => 'Gradebook API',
    'description' => 'Provides a gradebook API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gradebookapi_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'gradebookapi.admin.inc',
    'type' => MENU_NORMAL_ITEM, // optional
  );

  return $items;
}

/**
 * Implementation of hook_help().
 */
function gradebookapi_help($path, $arg) {
  switch ($path) {
    case 'admin/config/gradebook/gradebookapi':
      $output = '<p>' . t('The gradebook API provides a framework for developing gradebook user interfaces.') . '</p>';
      $output .= '<p>' . t('Indicate which of the following content types can be used as gradebook assignments.') . '</p>';
      return $output;
    case 'admin/gradebook':
      $output = '<p>' . t('The Gradebook suite of modules provides the framework and user interface for gradebooks that can be used by students and teachers. You can use the links below to configure these modules') . '</p>';
      return $output;
  }
}

/**
 *  gradebookapi_get_assignment_types
 *  @return
 *    an array of content types that are used as gradebook assigments
 */
function gradebookapi_get_assignment_types() {
  // This variable is set on the gradebookapi admin form.
  $types = array_filter((array) variable_get('gradebook_assignment_types', array()));
  return $types;
}

/**
 *  gradebookapi_select_nodes
 *
 *  Selects all the assignment nodes associated with a set of gradebook term ids. Particularly useful for a
 *  Gradebook page that lists all assignments in a gradebook and their grades
 *  @param $gradebook
 *    the gradebook object
 *  @param $tids
 *    an array of term ids (gradebook categories) to use in the search. If empty, use all gradebook categories
 *  @param $operator
 *    Optional: default is 'or' which ... otherwise ...
 *  @param $pager
 *    Optional: Default is TRUE, perform a paged database query, set to FALSE to do a limited range query instead
 *  @return
 *    Database query result
 */
function gradebookapi_select_nodes($gradebook, $operator = 'or', $pager = TRUE) {
  $sql = "SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {og_membership} om ON n.nid = om.etid AND om.entity_type = 'node' WHERE om.gid = " . $gradebook->nid . " AND n.type IN ('" . implode("','", gradebookapi_get_assignment_types()) . "') AND n.status = 1 ORDER BY n.sticky ASC, n.created ASC";
  if ($pager) {
    $limit = (int) variable_get('gradebook_grades_per_page', 10);
    $sql .= " LIMIT $limit";
    $sql_count = "SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {og_membership} om ON n.nid = om.etid AND om.entity_type = 'node' WHERE om.gid = " . $gradebook->nid . " AND n.type IN ('" . implode("','", gradebookapi_get_assignment_types()) . "') AND n.status = 1";
    $result = db_query($sql);
  }
  else {
    // TODO Please convert this statement to the D7 database API syntax.
    $result = db_query($sql); // get all records not a range
  }

  return $result;
}

/**
 * gradebookapi_get_grade
 *
 *  Retrieves the grade for the specified user and assignment.
 *
 *  @param $uid
 *    the user id to use in the request
 *  @param $nid
 *    the assignment node id to use in the request
 *  @return $grade
 *    the grade object
 *    If more than one grade exists only the last query is returned.
 *    If a grade has not been entered then a partial grade object returned.
 */
function gradebookapi_get_grade($uid, $nid) {
  $grades = gradebookapi_get_grades($uid, $nid);
  if (count($grades)) {
    return array_pop($grades);
  }
  // if no grade exists, return partial grade
  else {
    $grade = new StdClass;
    $grade->uid = $uid;
    $grade->timestamp = 0; // use this to indicate that grade was not loaded from database
    $grade->nid = $nid; // this is needed by the theme_gradebook_assignment_grade functions
    return $grade;
  }
}

/**
 *  gradebookapi_get_grades
 *    retrieves grade objects from the gradebookapi_grade tables.
 *  @param $uid user to get the grades for
 *  @param $nid node id of group to get grades for
 *  @return $grades
 *    an array of grade objects matching the constraint requested through $param.
 */
function gradebookapi_get_grades($uid, $nid) {
  $grades = array();

  $result = db_query('SELECT g.uid, g.nid, g.earned, g.exempt, g.timestamp, g.note FROM {gradebookapi_grade} g WHERE uid = :uid AND nid = :nid', array(':uid' => $uid, ':nid' => $nid));
  foreach ($result as $grade) {
    // can't use module_invoke here because it won't pass by reference..is there a better way to do this?
    $modules = module_implements('gradebookapi_grade');
    foreach ($modules as $module) {
      $func = $module . '_gradebookapi_grade';
      $func('get', $grade); //allows pass by reference!
    }
    $grades[] = $grade;
  }
  return $grades;
}

/**
 *  gradebookapi_set_grade().
 *    Updates or inserts the grade information into the gradebookapi_grade table.
 *    The student's grades are then recalculated for each gradebook category.
 *  @param $grade
 *    the grade object
 *  @ return NONE
 */
function gradebookapi_set_grade($grade) {
  $old = gradebookapi_get_grade($grade->uid, $grade->nid);
  $grade->timestamp = strtotime($grade->timestamp);
  if ($old->timestamp != 0) {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("UPDATE {gradebookapi_grade} SET exempt=%d, timestamp=%d, note='%s' WHERE uid=%d AND nid=%d", $grade->exempt, $grade->timestamp, $grade->note, $grade->uid, $grade->nid) */
    db_update('gradebookapi_grade')
  ->fields(array(
    'exempt' => $grade->exempt,
    'timestamp' => $grade->timestamp,
    'note' => $grade->note,
  ))
  ->condition('uid', $grade->uid)
  ->condition('nid', $grade->nid)
  ->execute();
  }
  else {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("INSERT INTO {gradebookapi_grade} (uid, nid, exempt, timestamp, note) VALUES (%d, %d, %d, %d, '%s')", $grade->uid, $grade->nid, $grade->exempt, $grade->timestamp, $grade->note) */
    $id = db_insert('gradebookapi_grade')
  ->fields(array(
    'uid' => $grade->uid,
    'nid' => $grade->nid,
    'exempt' => $grade->exempt,
    'timestamp' => $grade->timestamp,
    'note' => $grade->note,
  ))
  ->execute();
  }
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("UPDATE {gradebookapi_grade} SET earned = '%s' WHERE uid=%d AND nid=%d", $grade->earned, $grade->uid, $grade->nid) */
  db_update('gradebookapi_grade')
  ->fields(array(
    'earned' => $grade->earned,
  ))
  ->condition('uid', $grade->uid)
  ->condition('nid', $grade->nid)
  ->execute();
  module_invoke_all('gradebookapi_grade', 'set', $grade); // allow other modules to take action after a grade is saved
}

/**
 *  gradebookapi_assigment_delete().
 *    Delete assignment field values from the gradebookapi_grade database table when the node is deleted.
 *    Called via hook_nodeapi (delete).
 *  @param $node
 *    the assignment node
 *  @return
 *    NONE
 */
function gradebookapi_assignment_delete($node) {
  // delete grades for all users for this assignment node
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query('DELETE FROM {gradebookapi_grade} WHERE nid = %d', $node->nid) */
  db_delete('gradebookapi_grade')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implementation of hook_nodeapi().
 *
 * @return NONE
 */
function gradebookapi_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $types = (array) gradebookapi_get_assignment_types();
  if (in_array($node->type, $types)) {
    switch ($op) {
      case 'delete':
        gradebookapi_assignment_delete($node);
        break;
    }
  }
}

/**
 *  gradebookapi_is_student_or_teacher().
 *    Determine whether a user is either a student or teacher for a given gradebook
 *    Used to control access to gradebook content
 *  @param $gradebook
 *    the gradebook object
 *  @param $account
 *    the user object
 *  @return
 *    TRUE if $account is a student, teacher or has uid=1, FALSE otherwise.
 */
function gradebookapi_is_student_or_teacher($gradebook, $account = NULL) {
  if (gradebookapi_is_student($gradebook, $account)) {
    return TRUE;
  }
  elseif (gradebookapi_can_grade($gradebook, $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * If it is a teacher or has the perm 'grade all students' returns true
 */
function gradebookapi_can_grade($group) {
  return user_access('grade all students') || gradebookapi_is_teacher($group);
}

/**
 *  gradebookapi_is_student().
 *    Determine whether a user is a student for a given gradebook
 *    Used to control access to gradebook content
 *  @param $gradebook
 *    the gradebook object
 *  @param $account
 *    the user object
 *  @return
 *    TRUE if $account is a student or has uid=1, FALSE otherwise.
 */
function gradebookapi_is_student($gradebook, $account = NULL) {
  if (is_object($account)) {
    $uid = $account->uid;
  }
  else {
    $uid = $account;
  }
  return og_is_member('node', $gradebook->nid, 'user', $uid);
}

/**
 *  gradebookapi_is_teacher().
 *    Determine whether a user is a teacher for a given gradebook
 *    Used to control access to gradebook content
 *  @param $gradebook
 *    the gradebook object
 *  @param $account
 *    the user object
 *  @return
 *    TRUE if $account is a teacher or has uid=1, FALSE otherwise.
 */
function gradebookapi_is_teacher($gradebook, $account = NULL) {
  return $account->uid == '1' || $account->uid == $gradebook->uid;
}

/**
 *  gradebookapi_get_students().
 *    Gradebook UI modules determine which users are students and teachers.
 *    This is done by defining a function hook_gradebookapi_students that returns an array of user ids.
 *    The api calls all of these hook functions and merges the results into one array.
 *  @param $gradebook
 *    the gradebook object
 *  @return
 *    an array of student user ids.
 */
function gradebookapi_get_students($gradebook) {
  $students = array();
  $modules = module_implements('gradebookapi_students');
  foreach ($modules as $module) {
    $function = $module . '_gradebookapi_students';
    $students = $function($gradebook, $students);
  }
  return $students;
}

